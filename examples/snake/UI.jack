class UI {
  static int
    block_size
    , border
    , field_width
    , field_height
    , last_score;

  // Every Jack class is required to have at least 1 field
  field int _dummy;

  constructor UI new() {
    let block_size = 8;
    let border = 4;
    let field_width = (512 / block_size) - (2 * border);
    let field_height = (256 / block_size) - (2 * border);
    let last_score = -1;
    return this;
  }

  method void init() {
    var int border_size;
    let border_size = border * block_size;
    do Screen.setColor(true);
    do Screen.drawRectangle(
      border_size - 1,
      border_size - 1,
      512 - (border_size - 1),
      256 - (border_size - 1)
    );
    do Screen.setColor(false);
    do Screen.drawRectangle(
      border_size,
      border_size,
      512 - border_size,
      256 - border_size
    );
    return;
  }

  function void drawPanel(int width, int height, String msg) {
    var int panel_size, shadow_size, panel_x, panel_y;
    let shadow_size = 5;
    let panel_x = (512 - width) / 2;
    let panel_y = (256 - height) / 2;
    while (~(shadow_size < 0)) {
      do Screen.setColor(true);
      do Screen.drawRectangle(
        panel_x + shadow_size,
        panel_y + shadow_size,
        (512 - panel_x + shadow_size),
        (256 - panel_y + shadow_size)
      );
      let shadow_size = shadow_size - 1;
    }
    do Screen.setColor(false);
    do Screen.drawRectangle(
      panel_x + 1,
      panel_y + 1,
      (512 - panel_x) - 1,
      (256 - panel_y) - 1
    );
    do Output.moveCursor(11, (65 - msg.length()) / 2);
    do Output.printString(msg);
    return;
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  function int getFieldWidth() { return field_width; }
  function int getFieldHeight() { return field_height; }
  function int getBoardIndexSize() { return field_width * field_height; }

  function void drawBlock(boolean color, int x, int y) {
    do Screen.setColor(color);
    do Screen.drawRectangle(x, y, x + block_size, y + block_size);
    return;
  }

  function void drawBlockIndex(boolean color, int index) {
    var Array coords;
    let coords = UI.fromGameToScreen(index);
    do UI.drawBlock(color, coords[0], coords[1]);
    do coords.dispose();
    return;
  }

	function int fromGameCoordstoIndex(int x, int y) {
		return (y * field_width) + x;
	}

	function Array fromIndexToGameCoords(int coordIndex) {
    var Array coords;
    let coords = Array.new(2);
    let coords[0] = Utils.modulo(coordIndex, field_width);
    let coords[1] = coordIndex / field_width;
		return coords;
	}

	function Array fromGameToScreen(int coordIndex) {
    var Array gameCoords, screenCoords;
    let gameCoords = UI.fromIndexToGameCoords(coordIndex);
    let screenCoords = Array.new(2);
    let screenCoords[0] = (block_size) * (border + gameCoords[0]);
    let screenCoords[1] = (block_size) * (border + gameCoords[1]);
    do gameCoords.dispose();
		return screenCoords;
	}

	function void updateScore(int score) {
    var String s;
    if (score = last_score) {
      return;
    }
    let s = "SCORE: ";
    do Output.moveCursor(0, 0);
    do Output.printString(s);
    do Output.printInt(score);
    do Memory.deAlloc(s);
    let last_score = score;
		return;
	}

	function void drawIngameMenu(int score) {
    do UI.updateScore(score);
		return;
	}

	function void updateIngameMenu(int score) {
    do UI.updateScore(score);
		return;
	}
}



