class Snake {
  static int block_size;
	field List parts;
	field int direction; // current direction: 1=up, 2=down, 3=left, 4=right
	field int prevLast;
  field Array advanceResult;

	constructor Snake new(int startX, int startY) {
		let direction = 4;
    let block_size = 8;
		let parts = Snake.initSnakeParts(startX, startY);
		let advanceResult = Array.new(2);
		return this;
	}

  function List initSnakeParts(int startX, int startY) {
    var List l;
    var int initial_length, offset;
    let initial_length = 4;
    let offset = initial_length;

    let l = List.new(UI.fromGameCoordstoIndex(startX - offset, startY), null);
    let offset = offset - 1;
    while (offset > 0) {
      let l = l.append(UI.fromGameCoordstoIndex(startX - offset, startY));
      let offset = offset - 1;
    }
    return l;
  }

	method int getDirection() {
		return direction;
	}

	method int getHead() {
		return parts.getData();
	}

	method void setDirection(int dir) {
    var int old_dir_plane, new_dir_plane;
    // Disallow direction change in the same plane
    let old_dir_plane = (direction + 1) / 2;
    let new_dir_plane = (dir + 1) / 2;
    if (~(new_dir_plane = old_dir_plane)) {
      let direction = dir;
    }
		return;
	}

	method Array advance(int apple_coords) {
    var int head, newHead, xDelta, yDelta;
    var boolean is_collided, is_eaten;
    var Array prevHeadCoords;
    let advanceResult[0] = false;
    let advanceResult[1] = false;
    let prevHeadCoords = UI.fromIndexToGameCoords(parts.getData());
    let parts = parts.cycleLastToHead();
    let prevLast = parts.getData();
    if (direction = 1) { let yDelta = -1; }   // up arrow
    else {
    if (direction = 2) { let yDelta = 1; }   // down arrow
    else {
    if (direction = 3) { let xDelta = -1; }   // left arrow
    else {
    if (direction = 4) { let xDelta = 1; }   // right arrow
    }
    }
    }
    let newHead = UI.fromGameCoordstoIndex(
      Utils.modulo(prevHeadCoords[0] + xDelta, UI.getFieldWidth()), // wrap around
      Utils.modulo(prevHeadCoords[1] + yDelta, UI.getFieldHeight()) // wrap around
    );
    let is_collided = isCollided(newHead);
    if (is_collided) {
      let advanceResult[0] = true;
      return advanceResult;
    }
    let is_eaten = apple_coords = newHead;
    let advanceResult[1] = is_eaten;
    if (is_eaten) {
      do grow();
    }
    do parts.setData(newHead);
    do clearPart(prevLast);
    do drawHeadAdvance();
    do prevHeadCoords.dispose();
    return advanceResult;
	}

	method void dispose() {
    do parts.dispose();
		do Memory.deAlloc(this);
		return;
	}

	method void drawFull() {
      var List current;
      let current = parts;
      while (~(current = null)) {
          do drawPart(current.getData());
          let current = current.getNext();
      }
      return;
	}

	method void drawHeadAdvance() {
      var List current;
      let current = parts;
      if (~(current = null)) {
          do UI.drawSnakeHead(current.getData(), direction);
      }
      let current = current.getNext();
      do drawPart(current.getData());
      return;
	}

  method void drawPart(int index) {
      do UI.drawSnakePart(index);
      return;
  }

  method void clearPart(int index) {
      do UI.drawBlockIndex(false, index);
      return;
  }

  method boolean isCollided(int newHead) {
    var List current;
    let current = parts;
    while (~(current = null)) {
      if (current.getData() = newHead) {
        return true;
      }
      let current = current.getNext();
    }
    return false;
  }

  // TODO: Implement proper grow
  method void grow() {
    do parts.extendLast(prevLast);
    return;
  }
}
