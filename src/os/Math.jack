// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, m;
        let i = 0;
        let m = 1;
        let twoToThe = Array.new(16);
        while (i < 16) {
            let twoToThe[i] = m;
            let m = m + m;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, shiftedX, sum;
        let i = 0;
        let sum = 0;
        let shiftedX = x;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int res;
        let res = Math._divide(Math.abs(x), Math.abs(y));
        if (Math.bit(x, 15) = Math.bit(y, 15)) {
            return res;
        } else {
            return -res;
        }
    }

    function int _divide(int x, int y) {
        var int q, dq;
        if ((y > x) | (y < 0)) {
            return 0;
        }
        let q = Math._divide(x, 2 * y);
        let dq = q + q;
        if ((x - (dq * y)) < y) {
            return dq;
        } else {
            return dq + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, t;
        let y = 0;
        let i = 7;
        while (i > -1) {
            let t = y + twoToThe[i];
            let t = t * t;
            if (~(t > x) & (t > 0)) {
                let y = y + twoToThe[i];
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    function int bit(int x, int i) {
        return ~((twoToThe[i] & x) = 0);
    }
}
