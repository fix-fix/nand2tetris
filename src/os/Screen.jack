// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static int screenStartAddr, screenEndAddr;
    static int width, height;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screenStartAddr = 16384;
        let width = 512 / 16; // In words. 256 px = 256 bits = 16 words
        let height = 256; // In rows
        let screenEndAddr = screenStartAddr + height * width;
        let color = true;
        do Screen.clearScreen();
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        var Array mem;
        while (i < screenEndAddr) {
            let mem = screenStartAddr + i;
            let mem[0] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int inWordOffsetMask, colorBit;
        var int screenAddr;
        let screenAddr = screenStartAddr + (x / 16) + (y * width);

        let inWordOffsetMask = Screen.pow(Screen.modulo(x, 16));
        if (color) {
            let colorBit = inWordOffsetMask;
        } else {
            let colorBit = 0;
        }
        do Memory.poke(
            screenAddr,
            (Memory.peek(screenAddr)
            // Bit mask with a single zero to reset the updated bit, e.g. 0b111101111...
            & (~inWordOffsetMask))
            | colorBit
        );
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int tmp, a, b, diff, dx, dy;
        if (x2 < x1) {
            let tmp = x2;
            let x2 = x1;
            let x1 = tmp;
            let tmp = y2;
            let y2 = y1;
            let y1 = tmp;
        }

        // TODO: Optimize for larger continous chunks
        if (y1 = y2) {
            let a = x1;
            while (~(a > x2)) {
                do Screen.drawPixel(a, y1);
                let a = a + 1;
            }
            return;
        }
        if (x1 = x2) {
            let a = Math.min(y1, y2);
            let b = Math.max(y1, y2);
            while (~(a > b)) {
                do Screen.drawPixel(x1, a);
                let a = a + 1;
            }
            return;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        while (~(a > dx) & ~(b > Math.abs(dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + Math.abs(dy);
            } else {
                if (dy > 0) {
                    let b = b + 1;
                } else {
                    let b = b - 1;
                }
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int j;
        if (~(x1 < x2) | ~(y1 < y2)) {
            return;
        }
        let j = y1;
        while (~(j > y2)) {
            do Screen.drawLine(x1, j, x2, j);
            let j = j + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, halfWidth;
        if (r > 181) {
            return;
        }
        let dy = -r;
        while (~(dy > r)) {
            let halfWidth = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine
                ( x - halfWidth
                , y + dy
                , x + halfWidth
                , y + dy
                );
            let dy = dy + 1;
        }
        return;
    }

	function int modulo(int x, int y) {
		var int mod;
		let mod = (x-((x/y)*y));
		if (mod < 0) {
			let mod = mod + y;
		}
		return mod;
	}

	function int pow(int shift) {
        var int x;
        let x = 1;
        while (shift > 0) {
            let x = x + x;
            let shift = shift - 1;
        }
		return x;
	}
}
